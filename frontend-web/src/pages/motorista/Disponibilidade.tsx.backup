// frontend/src/pages/motorista/Disponibilidade.tsx
import { useEffect, useState } from 'react';
import { Save, RefreshCw, Clock, AlertCircle, CheckCircle, History } from 'lucide-react';
import { CalendarioDisponibilidade } from '../../components/disponibilidade/CalendarioDisponibilidade';
import { useDisponibilidade, useCalendarioDisponibilidade } from '../../hooks/useDisponibilidade';
import { getSemanaCorrenteEProxima } from '../../utils/disponibilidade.utils';
import { toast } from 'react-hot-toast';

export default function Disponibilidade() {
  const { semanas, isLoadingSemanas, salvar, isSaving } = useDisponibilidade();
  const {
    isDisponivel,
    toggleDisponibilidade,
    carregarDisponibilidades,
    getTotalSelecionado,
    converterParaEnvio,
    temAlteracoes,
    limparAlteracoes
  } = useCalendarioDisponibilidade();

  const [mostrarHistorico, setMostrarHistorico] = useState(false);
  const [ultimaAlteracao, setUltimaAlteracao] = useState<string | null>(null);

  const { semanaCorrente, proximaSemana } = getSemanaCorrenteEProxima();

  // Carregar disponibilidades existentes quando os dados chegarem
  useEffect(() => {
    if (semanas) {
      const todasDisponibilidades = [
        ...semanas.semanaCorrente.disponibilidades,
        ...semanas.proximaSemana.disponibilidades
      ];
      carregarDisponibilidades(todasDisponibilidades);

      // Pegar a data da √∫ltima altera√ß√£o
      if (todasDisponibilidades.length > 0) {
        const maisRecente = todasDisponibilidades.reduce((a, b) =>
          new Date(a.updatedAt) > new Date(b.updatedAt) ? a : b
        );
        setUltimaAlteracao(maisRecente.updatedAt);
      }
    }
  }, [semanas]);

  const handleSalvar = async () => {
    try {
      const disponibilidades = converterParaEnvio();
      
      // Validar que tem exatamente 42 turnos (2 semanas completas)
      if (disponibilidades.length !== 42) {
        toast.error('√â necess√°rio preencher as 2 semanas completas (42 turnos)');
        return;
      }

      await salvar(disponibilidades);
      
      limparAlteracoes();
      setUltimaAlteracao(new Date().toISOString());
      
      toast.success('Disponibilidade salva com sucesso!', {
        icon: '‚úÖ',
        duration: 3000
      });
    } catch (error: any) {
      console.error('Erro ao salvar disponibilidade:', error);
      toast.error(
        error.response?.data?.message || 'Erro ao salvar disponibilidade',
        { duration: 4000 }
      );
    }
  };

  const handleRecarregar = () => {
    window.location.reload();
  };

  const formatarDataHora = (dataISO: string | null): string => {
    if (!dataISO) return '‚Äî';
    const data = new Date(dataISO);
    return data.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoadingSemanas) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">üìÖ Minha Disponibilidade</h1>
        <p className="text-gray-600 mt-1">
          Informe sua disponibilidade para as pr√≥ximas 2 semanas
        </p>
      </div>

      {/* Alerta de Obrigatoriedade */}
      <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
        <div className="flex items-start">
          <AlertCircle className="w-5 h-5 text-yellow-600 mt-0.5 mr-3 flex-shrink-0" />
          <div className="text-sm">
            <p className="font-semibold text-yellow-800 mb-1">
              Aten√ß√£o: Voc√™ precisa informar sua disponibilidade para:
            </p>
            <ul className="text-yellow-700 space-y-1 ml-4">
              <li>‚Ä¢ <strong>Semana Corrente</strong> ({semanaCorrente.dias[0].toLocaleDateString('pt-BR')} - {semanaCorrente.dias[6].toLocaleDateString('pt-BR')})</li>
              <li>‚Ä¢ <strong>Pr√≥xima Semana</strong> ({proximaSemana.dias[0].toLocaleDateString('pt-BR')} - {proximaSemana.dias[6].toLocaleDateString('pt-BR')})</li>
            </ul>
            <p className="mt-2 text-yellow-700">
              Voc√™ pode alterar sua disponibilidade a qualquer momento.
            </p>
          </div>
        </div>
      </div>

      {/* Contador de turnos selecionados */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <CheckCircle className="w-6 h-6 text-blue-600" />
            <div>
              <p className="text-sm font-medium text-gray-700">
                Turnos selecionados
              </p>
              <p className="text-2xl font-bold text-blue-600">
                {getTotalSelecionado()} / 42
              </p>
            </div>
          </div>
          {temAlteracoes() && (
            <div className="flex items-center gap-2 text-orange-600 bg-orange-50 px-3 py-2 rounded-lg">
              <AlertCircle className="w-4 h-4" />
              <span className="text-sm font-medium">Altera√ß√µes n√£o salvas</span>
            </div>
          )}
        </div>
      </div>

      {/* Calend√°rio Semana Corrente */}
      <CalendarioDisponibilidade
        titulo="üóìÔ∏è  SEMANA CORRENTE"
        dias={semanaCorrente.dias}
        isDisponivel={isDisponivel}
        onToggle={toggleDisponibilidade}
      />

      {/* Calend√°rio Pr√≥xima Semana */}
      <CalendarioDisponibilidade
        titulo="üóìÔ∏è  PR√ìXIMA SEMANA"
        dias={proximaSemana.dias}
        isDisponivel={isDisponivel}
        onToggle={toggleDisponibilidade}
      />

      {/* Informa√ß√µes adicionais */}
      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex items-center gap-2 text-gray-700 mb-2">
          <Clock className="w-4 h-4" />
          <span className="text-sm font-medium">√öltima altera√ß√£o:</span>
        </div>
        <p className="text-sm text-gray-600 ml-6">
          {formatarDataHora(ultimaAlteracao)}
        </p>

        <button
          onClick={() => setMostrarHistorico(!mostrarHistorico)}
          className="mt-3 ml-6 text-sm text-blue-600 hover:text-blue-700 font-medium flex items-center gap-2"
        >
          <History className="w-4 h-4" />
          Ver Hist√≥rico de Altera√ß√µes
        </button>
      </div>

      {/* Hist√≥rico (expans√≠vel) */}
      {mostrarHistorico && (
        <div className="bg-white rounded-lg shadow-md p-4">
          <h3 className="font-semibold text-gray-900 mb-3">
            Hist√≥rico de Altera√ß√µes
          </h3>
          <p className="text-sm text-gray-600">
            Em desenvolvimento... Aqui aparecer√° o hist√≥rico completo de todas as altera√ß√µes feitas na sua disponibilidade.
          </p>
        </div>
      )}

      {/* Bot√µes de a√ß√£o */}
      <div className="flex gap-4 sticky bottom-24 bg-white p-4 rounded-lg shadow-lg border border-gray-200">
        <button
          type="button"
          onClick={handleRecarregar}
          disabled={isSaving}
          className="flex-1 px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium flex items-center justify-center gap-2"
        >
          <RefreshCw className="w-5 h-5" />
          Recarregar
        </button>

        <button
          type="button"
          onClick={handleSalvar}
          disabled={isSaving || !temAlteracoes()}
          className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium flex items-center justify-center gap-2 shadow-md"
        >
          {isSaving ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              Salvando...
            </>
          ) : (
            <>
              <Save className="w-5 h-5" />
              Salvar Disponibilidade
            </>
          )}
        </button>
      </div>

      {/* Dicas */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
          üí° Dicas
        </h3>
        <ul className="text-sm text-blue-800 space-y-1 ml-4">
          <li>‚Ä¢ Clique nas c√©lulas para marcar/desmarcar sua disponibilidade</li>
          <li>‚Ä¢ C√©lulas em <span className="font-semibold text-green-600">verde</span> indicam disponibilidade</li>
          <li>‚Ä¢ Voc√™ pode alterar sua disponibilidade a qualquer momento</li>
          <li>‚Ä¢ N√£o esque√ßa de salvar ap√≥s fazer altera√ß√µes!</li>
        </ul>
      </div>
    </div>
  );
}
