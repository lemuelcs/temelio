import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Plus, Edit, Trash2, DollarSign, Calendar, TrendingUp } from 'lucide-react';
import api from '../../services/api';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';

interface TabelaPreco {
  id: string;
  tipoVeiculo: 'MOTOCICLETA' | 'CARRO_PASSEIO' | 'CARGO_VAN' | 'LARGE_VAN';
  valorHora: number;
  dataInicio: string;
  dataFim?: string;
  ativo: boolean;
  createdAt: string;
}

export default function Precos() {
  const [showModal, setShowModal] = useState(false);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [filterTipo, setFilterTipo] = useState<string>('');

  const queryClient = useQueryClient();

  // Buscar tabelas de preços
  const { data: precos = [], isLoading } = useQuery({
    queryKey: ['precos'],
    queryFn: async () => {
      try {
        const response = await api.get('/precos');
        // A API retorna { status, data: { tabelas, total } }
        const dados = response.data?.data?.tabelas || response.data?.tabelas || response.data;
        return Array.isArray(dados) ? dados : [];
      } catch (error) {
        console.error('Erro ao buscar preços:', error);
        return [];
      }
    },
  });

  // Deletar preço
  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      await api.delete(`/precos/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['precos'] });
    },
  });

  // Filtrar preços
  const filteredPrecos = precos.filter((p: any) => {
    const tipoVeiculo = p.tipoVeiculo || '';
    const matchesTipo = !filterTipo || tipoVeiculo === filterTipo;
    return matchesTipo;
  });

  // Agrupar por tipo de veículo e propriedade
  const groupedPrecos = filteredPrecos.reduce((acc: any, preco: any) => {
    const key = `${preco.tipoVeiculo}_${preco.propriedadeVeiculo || 'PROPRIO'}`;
    if (!acc[key]) {
      acc[key] = {
        tipoVeiculo: preco.tipoVeiculo,
        propriedadeVeiculo: preco.propriedadeVeiculo || 'PROPRIO',
        precos: []
      };
    }
    acc[key].precos.push(preco);
    return acc;
  }, {});

  const handleEdit = (id: string) => {
    setEditingId(id);
    setShowModal(true);
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('Tem certeza que deseja excluir esta tabela de preços?')) {
      deleteMutation.mutate(id);
    }
  };

  const getTipoVeiculoLabel = (tipo: string) => {
    const labels: Record<string, string> = {
      MOTOCICLETA: 'Motocicleta',
      MOTO: 'Motocicleta',
      MOTORCYCLE: 'Motocicleta',
      CARRO_PASSEIO: 'Carro de Passeio',
      SEDAN: 'Carro de Passeio',
      CARGO_VAN: 'Van Carga',
      CARGO_VAN: 'Van Carga',
      LARGE_VAN: 'Van Grande',
      LARGE_VAN: 'Van Grande',
    };
    return labels[tipo] || tipo;
  };

  const getTipoIcon = (tipo: string) => {
    return <DollarSign className="w-5 h-5" />;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Tabelas de Preços</h1>
          <p className="text-gray-600 mt-1">Gerencie os valores por hora para cada tipo de veículo</p>
        </div>
        <button
          onClick={() => {
            setEditingId(null);
            setShowModal(true);
          }}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition"
        >
          <Plus className="w-5 h-5" />
          Nova Tabela
        </button>
      </div>

      {/* Filtro */}
      <div className="bg-white rounded-lg shadow p-4">
        <select
          value={filterTipo}
          onChange={(e) => setFilterTipo(e.target.value)}
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="">Todos os veículos</option>
          <option value="MOTOCICLETA">Motocicleta</option>
          <option value="CARRO_PASSEIO">Carro de Passeio</option>
          <option value="CARGO_VAN">Van Carga</option>
          <option value="LARGE_VAN">Van Grande</option>
        </select>
      </div>

      {/* Cards por Tipo de Veículo */}
      {isLoading ? (
        <div className="bg-white rounded-lg shadow p-8 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Carregando preços...</p>
        </div>
      ) : Object.keys(groupedPrecos).length === 0 ? (
        <div className="bg-white rounded-lg shadow p-8 text-center">
          <DollarSign className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600">Nenhuma tabela de preços encontrada</p>
        </div>
      ) : (
        <div className="space-y-6">
          {Object.entries(groupedPrecos).map(([key, grupo]: [string, any]) => {
            const tipoVeiculoLabel = getTipoVeiculoLabel(grupo.tipoVeiculo);
            const propriedadeLabel = grupo.propriedadeVeiculo === 'PROPRIO' ? 'Veículo Próprio' : 'Veículo da Transportadora';
            const precoAtual = grupo.precos[0]; // Assumindo que o primeiro é o ativo

            return (
              <div key={key} className="bg-white rounded-lg shadow overflow-hidden">
                <div className="bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center">
                        {getTipoIcon(grupo.tipoVeiculo)}
                      </div>
                      <div>
                        <h2 className="text-2xl font-bold">{tipoVeiculoLabel}</h2>
                        <p className="text-blue-100 mt-1">{propriedadeLabel}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-3xl font-bold">R$ {parseFloat(precoAtual.valorHora).toFixed(2)}</div>
                      <div className="text-blue-100 text-sm">por hora</div>
                    </div>
                  </div>
                </div>

                <div className="p-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600 mb-1">Valor Hora</p>
                      <p className="text-2xl font-bold text-gray-900">
                        R$ {parseFloat(precoAtual.valorHora).toFixed(2)}
                      </p>
                    </div>
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600 mb-1">Cancelamento/Hora</p>
                      <p className="text-2xl font-bold text-gray-900">
                        R$ {parseFloat(precoAtual.valorCancelamentoHora || 0).toFixed(2)}
                      </p>
                    </div>
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-600 mb-1">Multa Atraso</p>
                      <p className="text-2xl font-bold text-gray-900">
                        R$ {parseFloat(precoAtual.multaAtraso || 0).toFixed(2)}
                      </p>
                    </div>
                  </div>

                  {precoAtual.createdAt && (
                    <div className="mt-4 text-sm text-gray-500">
                      Criado em: {format(new Date(precoAtual.createdAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Modal */}
      {showModal && (
        <PrecoModal
          precoId={editingId}
          onClose={() => {
            setShowModal(false);
            setEditingId(null);
          }}
        />
      )}
    </div>
  );
}

// Modal de Criação/Edição
function PrecoModal({ precoId, onClose }: { precoId: string | null; onClose: () => void }) {
  const queryClient = useQueryClient();
  const isEditing = !!precoId;

  const [formData, setFormData] = useState({
    tipoVeiculo: 'MOTOCICLETA',
    valorHora: '',
    dataInicio: format(new Date(), 'yyyy-MM-dd'),
    dataFim: '',
    ativo: true,
  });

  // Buscar dados se estiver editando
  useQuery({
    queryKey: ['preco', precoId],
    queryFn: async () => {
      if (!precoId) return null;
      const response = await api.get(`/precos/${precoId}`);
      setFormData({
        ...response.data,
        valorHora: response.data.valorHora.toString(),
        dataInicio: format(new Date(response.data.dataInicio), 'yyyy-MM-dd'),
        dataFim: response.data.dataFim ? format(new Date(response.data.dataFim), 'yyyy-MM-dd') : '',
      });
      return response.data;
    },
    enabled: !!precoId,
  });

  const saveMutation = useMutation({
    mutationFn: async (data: any) => {
      const payload = {
        ...data,
        valorHora: parseFloat(data.valorHora),
        dataFim: data.dataFim || undefined,
      };
      if (isEditing) {
        return api.put(`/precos/${precoId}`, payload);
      }
      return api.post('/precos', payload);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['precos'] });
      onClose();
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    saveMutation.mutate(formData);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-md w-full">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            {isEditing ? 'Editar Tabela de Preços' : 'Nova Tabela de Preços'}
          </h2>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Tipo de Veículo *
            </label>
            <select
              value={formData.tipoVeiculo}
              onChange={(e) => setFormData({ ...formData, tipoVeiculo: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={isEditing}
            >
              <option value="MOTOCICLETA">Motocicleta</option>
              <option value="CARRO_PASSEIO">Carro de Passeio</option>
              <option value="CARGO_VAN">Van Carga</option>
              <option value="LARGE_VAN">Van Grande</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Valor por Hora (R$) *
            </label>
            <input
              type="number"
              required
              min="0"
              step="0.01"
              value={formData.valorHora}
              onChange={(e) => setFormData({ ...formData, valorHora: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="25.00"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Data de Início *
            </label>
            <input
              type="date"
              required
              value={formData.dataInicio}
              onChange={(e) => setFormData({ ...formData, dataInicio: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Data de Fim
            </label>
            <input
              type="date"
              value={formData.dataFim}
              onChange={(e) => setFormData({ ...formData, dataFim: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <p className="text-xs text-gray-500 mt-1">Deixe em branco se não tiver data de término</p>
          </div>

          <div>
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={formData.ativo}
                onChange={(e) => setFormData({ ...formData, ativo: e.target.checked })}
                className="w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500"
              />
              <span className="text-sm font-medium text-gray-700">Tabela Ativa</span>
            </label>
            <p className="text-xs text-gray-500 mt-1 ml-6">
              Apenas uma tabela por tipo de veículo pode estar ativa
            </p>
          </div>

          <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={saveMutation.isPending}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
            >
              {saveMutation.isPending ? 'Salvando...' : (isEditing ? 'Salvar Alterações' : 'Criar Tabela')}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}