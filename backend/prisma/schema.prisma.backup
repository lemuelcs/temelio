// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS NECESSÁRIOS
// ========================================

enum TipoVeiculo {
  MOTOCICLETA
  CARRO_PASSEIO
  CARGO_VAN
  LARGE_VAN
}

enum TipoPerfil {
  DESPACHANTE_PLANEJADOR
  MOTORISTA
  ADMINISTRADOR
}

enum StatusMotorista {
  ATIVO
  INATIVO
  SUSPENSO
  EXCLUIDO
}

enum TipoRota {
  ENTREGA
  EXTRA
  CUBOUT
  RESGATE
  NURSERY_LEVEL_1
  NURSERY_LEVEL_2
}

enum CicloRota {
  CICLO_1      // 8h às 11h
  CICLO_2      // 13h às 16h
  SAMEDAY      // 18h às 19h30
  SEM_CICLO
}

enum TurnoDisponibilidade {
  MATUTINO
  VESPERTINO
  NOTURNO
}

enum StatusRota {
  DISPONIVEL        // D-1: Oferta criada, aguardando aceitação
  OFERTADA          // D-1: Enviada para motorista(s)
  ACEITA            // D-1: Motorista aceitou
  RECUSADA          // D-1: Motorista recusou
  CANCELADA         // D-1 ou D+0: Cancelada pelo embarcador
  CONFIRMADA        // D+0: Rota criada pela roteirização (6h)
  EM_ANDAMENTO      // D+0: Motorista carregou e saiu
  CONCLUIDA         // D+0: Motorista finalizou a rota
  VALIDADA          // D+1: KM informado e valor final calculado
}

enum StatusOferta {
  PENDENTE
  ACEITA
  RECUSADA
  EXPIRADA
}

enum TipoBonusRota {
  POR_HORA
  VALOR_FIXO
}

enum TipoPropriedadeVeiculo {
  PROPRIO
  TRANSPORTADORA
}

// ========================================
// TABELAS DE USUÁRIOS E AUTENTICAÇÃO
// ========================================

model Usuario {
  id            String      @id @default(uuid())
  email         String      @unique
  senha         String
  nome          String
  perfil        TipoPerfil
  ativo         Boolean     @default(true)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relacionamentos
  motorista     Motorista?
  auditLogs     AuditLog[]
  
  @@map("usuarios")
}

// ========================================
// TABELAS DE MOTORISTAS
// ========================================

model Motorista {
  id                    String                  @id @default(uuid())
  transporterId         String?                 @unique @db.VarChar(14)
  nomeCompleto          String                  @db.VarChar(50)
  celular               String                  @db.VarChar(11)
  cep                   String?
  logradouro            String?
  numero                String?
  complemento           String?
  cidade                String                  @db.VarChar(30)
  uf                    String                  @db.VarChar(2)
  bairro                String?                 @db.VarChar(50)
  cpf                   String                  @unique @db.VarChar(11)
  email                 String                  @db.VarChar(50)
  tipoVeiculo           TipoVeiculo
  propriedadeVeiculo    TipoPropriedadeVeiculo  @default(PROPRIO)
  status                StatusMotorista         @default(ATIVO)
  pontuacao             Float                   @default(0)
  
  // Dados do veículo
  anoFabricacaoVeiculo  Int?
  placaVeiculo          String?                 @db.VarChar(7)
  
  // Datas de controle Nursery
  primeiraRotaNursery   DateTime?
  iniciouNurseryL1      DateTime?
  iniciouNurseryL2      DateTime?
  
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relacionamentos
  usuarioId             String                  @unique
  usuario               Usuario                 @relation(fields: [usuarioId], references: [id])
  
  documentos            DocumentoMotorista[]
  disponibilidades      Disponibilidade[]
  ofertas               OfertaRota[]
  contratos             ContratoMotorista[]
  faturamentos          Faturamento[]
  alertas               Alerta[]
  
  @@index([status])
  @@index([tipoVeiculo])
  @@index([cpf])
  @@map("motoristas")
}

model DocumentoMotorista {
  id                    String    @id @default(uuid())
  motoristaId           String
  
  // CNH
  numeroCNH             String?   @db.VarChar(11)
  validadeCNH           DateTime?
  
  // CRLV (Licenciamento)
  anoLicenciamento      Int?
  
  // BRK (Verificação de Antecedentes)
  dataVerificacaoBRK    DateTime?
  proximaVerificacaoBRK DateTime?
  statusBRK             Boolean   @default(false)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relacionamentos
  motorista             Motorista @relation(fields: [motoristaId], references: [id])
  
  @@unique([motoristaId])
  @@index([validadeCNH])
  @@index([proximaVerificacaoBRK])
  @@map("documentos_motoristas")
}

model ContratoMotorista {
  id                  String    @id @default(uuid())
  motoristaId         String
  
  numeroContrato      String    @unique @db.VarChar(20)
  dataAssinatura      DateTime
  dataVigenciaInicial DateTime
  ativo               Boolean   @default(true)
  
  // Dados do MEI
  cnpjMEI             String?   @db.VarChar(14)
  razaoSocialMEI      String?   @db.VarChar(100)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relacionamentos
  motorista           Motorista @relation(fields: [motoristaId], references: [id])
  
  @@index([motoristaId])
  @@index([ativo])
  @@map("contratos_motoristas")
}

// ========================================
// TABELAS DE DISPONIBILIDADE
// ========================================

model Disponibilidade {
  id            String                @id @default(uuid())
  motoristaId   String
  
  data          DateTime              @db.Date
  turno         TurnoDisponibilidade
  disponivel    Boolean               @default(true)
  
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  // Relacionamentos
  motorista     Motorista             @relation(fields: [motoristaId], references: [id])
  
  @@unique([motoristaId, data, turno])
  @@index([motoristaId, data])
  @@map("disponibilidades")
}

// ========================================
// TABELAS DE LOCAIS/ESTAÇÕES
// ========================================

model Local {
  id          String   @id @default(uuid())
  codigo      String   @unique @db.VarChar(10)
  nome        String   @db.VarChar(100)
  endereco    String   @db.Text
  latitude    Decimal?  @db.Decimal(10, 8)
  longitude   Decimal?  @db.Decimal(11, 8)
  cidade      String   @db.VarChar(50)
  bairro      String?   @db.VarChar(30)
  uf          String   @db.VarChar(2)
  ativo       Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  rotas       Rota[]
  
  
  @@map("locais")
}

// ========================================
// TABELAS DE PRECIFICAÇÃO
// ========================================

model TabelaPreco {
  id                    String                  @id @default(uuid())
  tipoVeiculo           TipoVeiculo
  propriedadeVeiculo    TipoPropriedadeVeiculo
  
  // Valores
  valorHora             Decimal                 @db.Decimal(10, 2)
  valorCancelamentoHora Decimal                 @db.Decimal(10, 2)
  valorAjudaCombustivel Decimal                 @db.Decimal(10, 2) // por km
  
  // Controle de vigência
  dataInicioVigencia    DateTime
  dataFimVigencia       DateTime?
  ativo                 Boolean                 @default(true)
  
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@index([tipoVeiculo, propriedadeVeiculo, ativo])
  @@map("tabelas_precos")
}

// ========================================
// TABELAS DE ROTAS
// ========================================

model Rota {
  id                    String        @id @default(uuid())
  
  // ===== CICLO D-1: Oferta Inicial =====
  dataRota              DateTime      @db.Date
  horaInicio            DateTime      @db.Time(0)  // Hora prevista de início
  horaFim               DateTime?     @db.Time(0)  // Hora prevista de fim
  tipoVeiculo           TipoVeiculo
  tipoRota              TipoRota      @default(ENTREGA)
  cicloRota             CicloRota     @default(SEM_CICLO) // CICLO_1, CICLO_SPEED, SAME_DAY ou SEM_CICLO
  tamanhoHoras          Decimal       @db.Decimal(4, 2) // Permite 8.5h, por exemplo
  veiculoTransportadora Boolean       @default(false) // false = veículo motorista
  
  // Valores D-1
  valorHora             Decimal       @db.Decimal(10, 2)
  bonusPorHora          Decimal       @default(0) @db.Decimal(10, 2)
  bonusFixo             Decimal       @default(0) @db.Decimal(10, 2)
  valorProjetado        Decimal       @db.Decimal(10, 2) // Valor sem bônus KM
  kmProjetado           Int?          @default(50)
  
  // ===== CICLO D+0: Roteirização =====
  codigoRota            String?       @unique // Gerado às 6h do D+0
  qtdePacotes           Int?
  qtdeLocais            Int?
  qtdeParadas           Int?
  horaInicioReal        DateTime?     // Hora real que começou
  horaFimReal           DateTime?     // Hora real que terminou
  
  // ===== CICLO D+1: Validação =====
  kmReal                Decimal?      @db.Decimal(10, 2) // KM real rodado
  bonusPorKm            Decimal       @default(0.50) @db.Decimal(10, 2)
  valorBonusKm          Decimal?      @db.Decimal(10, 2) // KM × bonusPorKm
  valorTotalRota        Decimal       @db.Decimal(10, 2) // Valor final pago
  dataValidacao         DateTime?     // Quando foi validado
  validadoPor           String?       // Usuário que validou
  
  // Status e Estágio
  status                StatusRota    @default(DISPONIVEL)
  
  // Localização
  localId               String
  
  // Cancelamento
  motivoCancelamento    String?       @db.Text
  dataCancelamento      DateTime?
  valorCancelamento     Decimal?      @db.Decimal(10, 2)
  
  // Relacionamento com Motorista
  motoristaId           String?
  
  // Metadados
  criadoPor             String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relacionamentos
  local                 Local         @relation(fields: [localId], references: [id])
  motorista             Motorista?    @relation(fields: [motoristaId], references: [id])
  ofertas               OfertaRota[]
  
  @@index([dataRota, status])
  @@index([status, dataRota])
  @@index([tipoVeiculo])
  @@index([codigoRota])
  @@map("rotas")
}

model OfertaRota {
  id                      String        @id @default(uuid())
  rotaId                  String
  motoristaId             String
  
  status                  StatusOferta  @default(PENDENTE)
  
  // Datas de controle
  dataEnvio               DateTime      @default(now())
  dataVisualizacao        DateTime?
  dataResposta            DateTime?
  
  // Dados de auditoria da resposta
  ipResposta              String?       @db.VarChar(45)
  dispositivoResposta     String?       @db.VarChar(100)
  latitudeResposta        Decimal?      @db.Decimal(10, 8)
  longitudeResposta       Decimal?      @db.Decimal(11, 8)
  
  // Compromissos na agenda
  adicionouAgenda         Boolean       @default(false)
  
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Relacionamentos
  rota                    Rota          @relation(fields: [rotaId], references: [id])
  motorista               Motorista     @relation(fields: [motoristaId], references: [id])
  
  @@index([motoristaId, status])
  @@index([rotaId])
  @@map("ofertas_rotas")
}

// ========================================
// TABELAS DE FATURAMENTO
// ========================================

model Faturamento {
  id                String    @id @default(uuid())
  motoristaId       String
  
  // Período
  quinzena          Int       // 1 ou 2
  mes               Int
  ano               Int
  
  // Valores
  valorRotas        Decimal   @db.Decimal(10, 2) @default(0)
  valorBonus        Decimal   @db.Decimal(10, 2) @default(0)
  valorAjudaCombustivel Decimal @db.Decimal(10, 2) @default(0)
  valorCancelamentos Decimal  @db.Decimal(10, 2) @default(0)
  valorTotal        Decimal   @db.Decimal(10, 2) @default(0)
  
  pago              Boolean   @default(false)
  dataPagamento     DateTime?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  motorista         Motorista @relation(fields: [motoristaId], references: [id])
  
  @@unique([motoristaId, quinzena, mes, ano])
  @@index([motoristaId])
  @@map("faturamentos")
}

// ========================================
// TABELAS DE MÉTRICAS/KPIs
// ========================================

model MetricaEntrega {
  id                String    @id @default(uuid())
  rotaId            String
  motoristaId       String
  
  data              DateTime  @db.Date
  
  // Métricas
  totalPacotes      Int
  pacotesEntregues  Int
  pacotesRetornados Int       // RTS
  pacotesPNOV       Int       // Product Not On Van
  pacotesDNR        Int       // Delivery Not Received
  
  // DRC - Delivery Rate Completion
  taxaDRC           Decimal   @db.Decimal(5, 2)
  
  // OTD - On Time Dispatch
  horarioCarregamento DateTime @db.Time(0)
  horarioChegada      DateTime?
  atrasouCarregamento Boolean  @default(false)
  minutosAtraso       Int?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([data])
  @@index([motoristaId])
  @@map("metricas_entregas")
}

// ========================================
// TABELA DE AUDITORIA
// ========================================

model AuditLog {
  id            String    @id @default(uuid())
  usuarioId     String
  
  acao          String    @db.VarChar(100)
  entidade      String    @db.VarChar(50)
  entidadeId    String?
  descricao     String?   @db.Text
  
  // Dados do acesso
  ip            String    @db.VarChar(45)
  dispositivo   String    @db.VarChar(100)
  latitude      Decimal?  @db.Decimal(10, 8)
  longitude     Decimal?  @db.Decimal(11, 8)
  
  createdAt     DateTime  @default(now())
  
  // Relacionamentos
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])
  
  @@index([usuarioId, createdAt])
  @@index([entidade, entidadeId])
  @@map("audit_logs")
}

// ========================================
// TABELA DE ALERTAS/COMPLIANCE
// ========================================

model Alerta {
  id              String    @id @default(uuid())
  tipo            String    @db.VarChar(50) // CNH_VENCENDO, BRK_VENCIDO, etc
  motoristaId     String?
  
  titulo          String    @db.VarChar(100)
  descricao       String    @db.Text
  severidade      String    @db.VarChar(20) // CRITICA, ALTA, MEDIA, BAIXA
  
  resolvido       Boolean   @default(false)
  dataResolucao   DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  motorista       Motorista? @relation(fields: [motoristaId], references: [id])

  @@index([motoristaId, resolvido])
  @@index([tipo, resolvido])
  @@map("alertas")
}