// backend/src/routes/disponibilidade.routes.ts
// CORRIGIDO: Adicionado endpoint GET /api/disponibilidades para listar todas

import { Router } from 'express';
import disponibilidadeController from '../controllers/disponibilidade.controller';
import { authenticate, authorize } from '../middlewares/auth.middleware';


import {
  salvarDisponibilidadesBatch,
  buscarSemanas,
  buscarHistorico
} from '../controllers/disponibilidade.controller';

const router = Router();

// Todas as rotas requerem autenticação
router.use(authenticate);

// ========================================
// ROTAS DA GESTÃO (DEVEM VIR ANTES DAS ROTAS PARAMETRIZADAS)
// ========================================

/**
 * @route   GET /api/disponibilidades
 * @desc    Listar TODAS as disponibilidades com filtros (PARA GESTÃO)
 * @access  Private (DESPACHANTE_PLANEJADOR, ADMINISTRADOR)
 * @query   dataInicio, dataFim, motoristaId, turno, disponivel
 */
router.get(
  '/',
  authorize('DESPACHANTE_PLANEJADOR', 'ADMINISTRADOR'),
  disponibilidadeController.listarTodas // ← NOVO CONTROLLER
);

/**
 * @route   GET /api/disponibilidades/resumo
 * @desc    Buscar resumo consolidado por tipo de veículo
 * @access  Private (DESPACHANTE_PLANEJADOR, ADMINISTRADOR)
 * @query   dataInicio, dataFim
 */
router.get(
  '/resumo',
  authorize('DESPACHANTE_PLANEJADOR', 'ADMINISTRADOR'),
  disponibilidadeController.buscarResumo
);

/**
 * @route   GET /api/disponibilidades/minhas
 * @desc    Buscar disponibilidades do motorista logado
 * @access  Private (MOTORISTA)
 */
router.get(
  '/minhas',
  authorize('MOTORISTA'),
  disponibilidadeController.minhasDisponibilidades
);

/**
 * @route   GET /api/disponibilidades/semanas
 * @desc    Buscar semana corrente + próxima semana estruturado
 * @access  Private (MOTORISTA)
 */
router.get(
  '/semanas',
  authorize('MOTORISTA'),
  disponibilidadeController.buscarSemanas
);

/**
 * @route   GET /api/disponibilidades/historico
 * @desc    Buscar histórico de alterações
 * @access  Private (MOTORISTA)
 */
router.get(
  '/historico',
  authorize('MOTORISTA'),
  disponibilidadeController.buscarHistorico
);

/**
 * @route   POST /api/disponibilidades/buscar-motoristas
 * @desc    Buscar motoristas disponíveis para data/turno
 * @access  Private (DESPACHANTE_PLANEJADOR, ADMINISTRADOR)
 */
router.post(
  '/buscar-motoristas',
  authorize('DESPACHANTE_PLANEJADOR', 'ADMINISTRADOR'),
  disponibilidadeController.buscarMotoristasDisponiveis
);

// ========================================
// ROTAS DO MOTORISTA
// ========================================

/**
 * @route   POST /api/disponibilidades/batch
 * @desc    Cadastrar/atualizar disponibilidades em lote (2 semanas = 42 turnos)
 * @access  Private (MOTORISTA)
 */
router.post(
  '/batch',
  authorize('MOTORISTA'),
  disponibilidadeController.cadastrarBatch
);

/**
 * @route   POST /api/disponibilidades
 * @desc    Cadastrar disponibilidade individual (compatibilidade)
 * @access  Private
 */
router.post(
  '/',
  disponibilidadeController.cadastrar
);

// ========================================
// ROTAS COM PARÂMETROS (DEVEM VIR POR ÚLTIMO)
// ========================================

/**
 * @route   GET /api/disponibilidades/motorista/:motoristaId
 * @desc    Buscar disponibilidades de um motorista específico
 * @access  Private (DESPACHANTE_PLANEJADOR, ADMINISTRADOR)
 */
router.get(
  '/motorista/:motoristaId',
  authorize('DESPACHANTE_PLANEJADOR', 'ADMINISTRADOR'),
  disponibilidadeController.buscarPorMotorista
);

/**
 * @route   PUT /api/disponibilidades/:id
 * @desc    Atualizar uma disponibilidade específica
 * @access  Private (MOTORISTA)
 */
router.put(
  '/:id',
  authorize('MOTORISTA'),
  disponibilidadeController.atualizar
);

/**
 * @route   DELETE /api/disponibilidades/:id
 * @desc    Excluir uma disponibilidade
 * @access  Private (MOTORISTA)
 */
router.delete(
  '/:id',
  authorize('MOTORISTA'),
  disponibilidadeController.excluir
);

export default router;
